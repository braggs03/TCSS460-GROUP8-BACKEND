{
	"info": {
		"_postman_id": "926be3dd-4207-4659-9f28-68b49964cd31",
		"name": "Book - Rating",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39100411",
		"_collection_link": "https://tcss462.postman.co/workspace/TCSS462-Workspace~398c174b-dbb4-4b66-88ca-3c20b823525f/collection/38698877-926be3dd-4207-4659-9f28-68b49964cd31?action=share&source=collection_link&creator=39100411"
	},
	"item": [
		{
			"name": "get by rating good params",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response includes all required\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.ownProperty('entries'); \r",
							"    pm.expect(response.entries).to.be.an('array'); \r",
							"    const firstBook = response.entries[0];\r",
							"    pm.expect(firstBook).to.have.ownProperty('isbn13'); \r",
							"    pm.expect(firstBook).to.have.ownProperty('authors');\r",
							"    pm.expect(firstBook).to.have.ownProperty('publication');\r",
							"//    pm.expect(firstBook).to.have.ownProperty('series_name');\r",
							"//    pm.expect(firstBook).to.have.ownProperty('series_position');\r",
							"    pm.expect(firstBook).to.have.ownProperty('title'); \r",
							"    pm.expect(firstBook).to.have.ownProperty('ratings');\r",
							"    pm.expect(firstBook.ratings).to.have.ownProperty('average');\r",
							"    pm.expect(firstBook.ratings).to.have.ownProperty('count');\r",
							"    pm.expect(firstBook.ratings).to.have.ownProperty('rating_1');\r",
							"    pm.expect(firstBook.ratings).to.have.ownProperty('rating_2');\r",
							"    pm.expect(firstBook.ratings).to.have.ownProperty('rating_3');\r",
							"    pm.expect(firstBook.ratings).to.have.ownProperty('rating_4');\r",
							"    pm.expect(firstBook.ratings).to.have.ownProperty('rating_5');\r",
							"    pm.expect(firstBook).to.have.ownProperty('icons');\r",
							"    pm.expect(firstBook.icons).to.have.ownProperty('large');\r",
							"    pm.expect(firstBook.icons).to.have.ownProperty('small');\r",
							"    pm.expect(response).to.have.ownProperty('pagination'); \r",
							"    pm.expect(response.pagination).to.have.ownProperty('totalRecords'); \r",
							"    pm.expect(response.pagination).to.have.ownProperty('limit'); \r",
							"    pm.expect(response.pagination).to.have.ownProperty('offset'); \r",
							"    pm.expect(response.pagination).to.have.ownProperty('nextPage'); \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{valid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:4000/book/rating?rating_min=4&rating_max=5&offset=10",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"book",
						"rating"
					],
					"query": [
						{
							"key": "rating_min",
							"value": "4"
						},
						{
							"key": "rating_max",
							"value": "5"
						},
						{
							"key": "offset",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get by rating no params",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response does include specified elements\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.ownProperty(\"message\")\r",
							"    pm.expect(response.message).to.equal(\"Missing max and min rating, atleast one of which should be supplied.\")\r",
							"    pm.response.to.have.status(400);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{valid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:4000/book/rating",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"book",
						"rating"
					]
				}
			},
			"response": []
		},
		{
			"name": "get by rating no min",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response includes all required\", () => {\r",
							"    const response = pm.response.json();\r",
							"    const firstBook = response.entries[0];\r",
							"    pm.expect(firstBook).to.have.ownProperty('isbn13'); \r",
							"    pm.expect(firstBook).to.have.ownProperty('authors');\r",
							"    pm.expect(firstBook).to.have.ownProperty('publication');\r",
							"//    pm.expect(firstBook).to.have.ownProperty('series_name');\r",
							"//    pm.expect(firstBook).to.have.ownProperty('series_position');\r",
							"    pm.expect(firstBook).to.have.ownProperty('title'); \r",
							"    pm.expect(firstBook).to.have.ownProperty('ratings');\r",
							"    pm.expect(firstBook.ratings).to.have.ownProperty('average');\r",
							"    pm.expect(firstBook.ratings).to.have.ownProperty('count');\r",
							"    pm.expect(firstBook.ratings).to.have.ownProperty('rating_1');\r",
							"    pm.expect(firstBook.ratings).to.have.ownProperty('rating_2');\r",
							"    pm.expect(firstBook.ratings).to.have.ownProperty('rating_3');\r",
							"    pm.expect(firstBook.ratings).to.have.ownProperty('rating_4');\r",
							"    pm.expect(firstBook.ratings).to.have.ownProperty('rating_5');\r",
							"    pm.expect(firstBook).to.have.ownProperty('icons');\r",
							"    pm.expect(firstBook.icons).to.have.ownProperty('large');\r",
							"    pm.expect(firstBook.icons).to.have.ownProperty('small');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{valid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:4000/book/rating?rating_max=4",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"book",
						"rating"
					],
					"query": [
						{
							"key": "rating_max",
							"value": "4"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get by rating no max",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response includes all required\", () => {\r",
							"    const response = pm.response.json();\r",
							"    const firstBook = response.entries[0];\r",
							"    pm.expect(firstBook).to.have.ownProperty('isbn13'); \r",
							"    pm.expect(firstBook).to.have.ownProperty('authors');\r",
							"    pm.expect(firstBook).to.have.ownProperty('publication');\r",
							"    pm.expect(firstBook).to.have.ownProperty('title'); \r",
							"    pm.expect(firstBook).to.have.ownProperty('ratings');\r",
							"    pm.expect(firstBook.ratings).to.have.ownProperty('average');\r",
							"    pm.expect(firstBook.ratings).to.have.ownProperty('count');\r",
							"    pm.expect(firstBook.ratings).to.have.ownProperty('rating_1');\r",
							"    pm.expect(firstBook.ratings).to.have.ownProperty('rating_2');\r",
							"    pm.expect(firstBook.ratings).to.have.ownProperty('rating_3');\r",
							"    pm.expect(firstBook.ratings).to.have.ownProperty('rating_4');\r",
							"    pm.expect(firstBook.ratings).to.have.ownProperty('rating_5');\r",
							"    pm.expect(firstBook).to.have.ownProperty('icons');\r",
							"    pm.expect(firstBook.icons).to.have.ownProperty('large');\r",
							"    pm.expect(firstBook.icons).to.have.ownProperty('small');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{valid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:4000/book/rating?rating_min=4",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"book",
						"rating"
					],
					"query": [
						{
							"key": "rating_min",
							"value": "4"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get by rating min greater than max",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Min rating > max\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.ownProperty(\"message\")\r",
							"    pm.expect(response.message).to.equal(\"Min or Max is not a valid rating, should be a floating point from 1 to 5 with no crossover i.e rating_min <= rating_max.\")\r",
							"    pm.response.to.have.status(400);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{valid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"rating_min\": \"3\",\r\n    \"rating_max\": \"2\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:4000/book/rating?rating_min=5&rating_max=4",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"book",
						"rating"
					],
					"query": [
						{
							"key": "rating_min",
							"value": "5"
						},
						{
							"key": "rating_max",
							"value": "4"
						}
					]
				}
			},
			"response": []
		}
	]
}