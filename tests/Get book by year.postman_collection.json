{
	"info": {
		"_postman_id": "6b85ac47-ef17-4283-bead-1beb943bf7b4",
		"name": "Get book by year",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39100411",
		"_collection_link": "https://tcss462.postman.co/workspace/TCSS462-Workspace~398c174b-dbb4-4b66-88ca-3c20b823525f/collection/38698877-6b85ac47-ef17-4283-bead-1beb943bf7b4?action=share&source=collection_link&creator=39100411"
	},
	"item": [
		{
			"name": "Get book by year success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response includes all required\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.ownProperty('entries'); \r",
							"    pm.expect(response.entries).to.be.an('array'); \r",
							"    const firstBook = response.entries[0];\r",
							"    pm.expect(firstBook).to.have.ownProperty('isbn13'); \r",
							"    pm.expect(firstBook).to.have.ownProperty('authors');\r",
							"    pm.expect(firstBook).to.have.ownProperty('publication');\r",
							"    pm.expect(firstBook).to.have.ownProperty('title'); \r",
							"    pm.expect(firstBook).to.have.ownProperty('ratings');\r",
							"    pm.expect(firstBook.ratings).to.have.ownProperty('average');\r",
							"    pm.expect(firstBook.ratings).to.have.ownProperty('count');\r",
							"    pm.expect(firstBook.ratings).to.have.ownProperty('rating_1');\r",
							"    pm.expect(firstBook.ratings).to.have.ownProperty('rating_2');\r",
							"    pm.expect(firstBook.ratings).to.have.ownProperty('rating_3');\r",
							"    pm.expect(firstBook.ratings).to.have.ownProperty('rating_4');\r",
							"    pm.expect(firstBook.ratings).to.have.ownProperty('rating_5');\r",
							"    pm.expect(firstBook).to.have.ownProperty('icons');\r",
							"    pm.expect(firstBook.icons).to.have.ownProperty('large');\r",
							"    pm.expect(firstBook.icons).to.have.ownProperty('small');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{valid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/book/year?year_min=1999&year_max=2000",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"book",
						"year"
					],
					"query": [
						{
							"key": "year_min",
							"value": "1999"
						},
						{
							"key": "year_max",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get book by year no year",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response does include specified elements\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.ownProperty(\"message\");\r",
							"    pm.expect(response.message).to.equal(\"Year parameter is invalid. A year should be a number between 1600 and 3000. Additionally, the minimum year should be less than or equal to the maximum year.\");\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{valid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/book/year?year_min=&year_max=\n",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"book",
						"year"
					],
					"query": [
						{
							"key": "year_min",
							"value": ""
						},
						{
							"key": "year_max",
							"value": "\n"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get book by year out of range",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response does include specified elements\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.ownProperty(\"message\");\r",
							"    pm.expect(response.message).to.equal(\"Year parameter is invalid. A year should be a number between 1600 and 3000. Additionally, the minimum year should be less than or equal to the maximum year.\");\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{valid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/book/year?year_min=1566&year_max=3000\n",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"book",
						"year"
					],
					"query": [
						{
							"key": "year_min",
							"value": "1566"
						},
						{
							"key": "year_max",
							"value": "3000\n"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get book by year min > max",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response does include specified elements\", () => {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.ownProperty(\"message\");\r",
							"    pm.expect(response.message).to.equal(\"Year parameter is invalid. A year should be a number between 1600 and 3000. Additionally, the minimum year should be less than or equal to the maximum year.\");\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{valid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/book/year?year_min=1931&year_max=1922\n",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"book",
						"year"
					],
					"query": [
						{
							"key": "year_min",
							"value": "1931"
						},
						{
							"key": "year_max",
							"value": "1922\n"
						}
					]
				}
			},
			"response": []
		}
	]
}